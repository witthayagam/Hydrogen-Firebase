#include <Arduino.h>
#if defined(ESP32)
  #include <WiFi.h>
#elif defined(ESP8266)
  #include <ESP8266WiFi.h>
#endif
#include <Firebase_ESP_Client.h>
#include <Adafruit_MCP2515.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
#include <NTPClient.h>
#include <WiFiUdp.h>

#define CAN_BAUDRATE (500000)
Adafruit_MCP2515 mcp(5, 23, 19, 18);

// Wi-Fi Credentials
#define WIFI_SSID "Witthaya"           // Replace with your Wi-Fi SSID
#define WIFI_PASSWORD "Treesolars"   // Replace with your Wi-Fi Password

// Firebase Configuration
#define API_KEY "AIzaSyADyNHyBZFgvMlBw5feHYbzTzMufTJHt_U"
#define DATABASE_URL "https://h-data-de959-default-rtdb.asia-southeast1.firebasedatabase.app/"

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
unsigned long dataSendInterval = 150000;

float hydrogenPercent = 0.0;
int temperature = 0;
bool signupOK = false;

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 0, 60000);

String getFormattedTimestamp() {
  time_t rawTime = timeClient.getEpochTime();
  struct tm *timeInfo = localtime(&rawTime);

  char buffer[30];
  sprintf(buffer, "%02d-%02d-%04d-%02d:%02d:%02d", 
          timeInfo->tm_mday, 
          timeInfo->tm_mon + 1, 
          timeInfo->tm_year + 1900, 
          timeInfo->tm_hour + 7, 
          timeInfo->tm_min, 
          timeInfo->tm_sec);
  
  return String(buffer);
}

bool sendDataToFirebase(String path, FirebaseJson &json) {
  const int maxRetries = 3;  // จำนวนรอบ Retry สูงสุด
  int retryCount = 0;
  int waitTime = 5000; // เริ่มรอ 1 วินาที

  while (retryCount < maxRetries) {
    if (Firebase.RTDB.setJSON(&fbdo, path.c_str(), &json)) {
      Serial.println("Data sent to Firebase successfully.");
      return true; // ส่งสำเร็จ ออกได้เลย
    } else {
      Serial.printf("[Retry %d] Error sending data: %s\n", retryCount + 1, fbdo.errorReason().c_str());
      delay(waitTime); // รอแบบค่อยๆ เพิ่ม
      retryCount++;
      waitTime *= 2; // คูณสองทุกครั้งที่ล้มเหลว (1s -> 2s -> 4s)
    }
  }

  Serial.println("Failed to send data after maximum retries.");
  return false; // ส่งไม่สำเร็จทุกครั้ง
}


void setup() {
  Serial.begin(115200);

  Serial.println("Initializing MCP2515...");
  if (!mcp.begin(CAN_BAUDRATE)) {
    Serial.println("Error initializing MCP2515.");
    while (1) delay(10);
  }
  Serial.println("MCP2515 initialized.");

  Serial.println("Connecting to Wi-Fi...");

  WiFi.setAutoReconnect(true);
  WiFi.persistent(true);

  // WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi lost. Reconnecting...");
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  }

  while (WiFi.status() != WL_CONNECTED) {
    delay(300);
    Serial.print(".");
  }
  Serial.println("\nWi-Fi connected.");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  timeClient.begin();
  timeClient.update();

  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  config.timeout.serverResponse = 10000;
  config.token_status_callback = tokenStatusCallback;

  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("Firebase authentication successful.");
    signupOK = true;
  } else {
    Serial.printf("Firebase sign-up error: %s\n", config.signer.signupError.message.c_str());
  }

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}

void loop() {
  timeClient.update();

  int packetSize = mcp.parsePacket();
  if (packetSize) {
    Serial.print("Received packet with ID: 0x");
    Serial.print(mcp.packetId(), HEX);
    Serial.print(" Length: ");
    Serial.println(packetSize);

    if (mcp.packetId() == 0x256) {
      uint8_t rxBuf[8];
      int i = 0;
      while (mcp.available()) {
        rxBuf[i++] = mcp.read();
      }
      
      uint16_t hydrogenRaw = (rxBuf[1] << 8) | rxBuf[2];
      hydrogenPercent = hydrogenRaw * 0.01;
      uint8_t temperatureRaw = rxBuf[0];
      temperature = temperatureRaw - 55;

      Serial.print("Hydrogen Percent: ");
      Serial.print(hydrogenPercent, 2);
      Serial.println(" %");

      Serial.print("Temperature: ");
      Serial.print(temperature);
      Serial.println(" °C");
    } else {
      Serial.println("Unknown CAN ID received.");
    }
  }

  if (Firebase.ready() && signupOK && (millis() - sendDataPrevMillis > dataSendInterval)) {
    sendDataPrevMillis = millis();
    
    String timestamp = getFormattedTimestamp();
    String path = "/SensorData/" + timestamp;

    FirebaseJson json;
    json.set("hydrogenPercent", hydrogenPercent);
    json.set("temperature", temperature);
    json.set("timestamp", timestamp);

    sendDataToFirebase(path, json);  // ส่งพร้อม Retry

    // อัปเดตแบบ real-time ด้วย
    String realtimePath = "/Sensorrealtime";
    sendDataToFirebase(realtimePath, json);
    }

  // delay(5000);
  static unsigned long lastLoopDelay = 0;
  if (millis() - lastLoopDelay > 5000) {
    lastLoopDelay = millis();
    // งานที่อยากทำทุก 5 วิ เช่นพิมพ์ Serial, หรืออัปเดตข้อมูล
  }

  
}
